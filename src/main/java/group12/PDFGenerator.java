/**
 * @author jalenearmstrong
 * PDF Generator-Inator
 * Adapted From: https://www.vogella.com/tutorials/JavaPDF/article.html
 * Note: Still To Modify
 */

 package group12;

 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.util.Date;
 import java.util.Map;
 
 import com.itextpdf.text.Anchor;
 import com.itextpdf.text.Chapter;
 import com.itextpdf.text.Document;
 import com.itextpdf.text.DocumentException;
 import com.itextpdf.text.Element;
 import com.itextpdf.text.Font;
 import com.itextpdf.text.Paragraph;
 import com.itextpdf.text.Phrase;
 import com.itextpdf.text.Section;
 import com.itextpdf.text.pdf.PdfPCell;
 import com.itextpdf.text.pdf.PdfPTable;
 import com.itextpdf.text.pdf.PdfWriter;
 
 public class PDFGenerator {
     private static final Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
    //  private static final Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
     private static final Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
     private static final Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
 
     // Generate the PDF report with the title and test results
     public static void generatePDFReport(String title, Map<String, Boolean> testResults) {
        String directoryPath = "src/student-results";
        File directory = new File(directoryPath);

        if (!directory.exists()) {
            directory.mkdirs();
        }

        String FILE = directoryPath + File.separator + title + ".pdf";

         try {
             Document document = new Document();
             PdfWriter.getInstance(document, new FileOutputStream(FILE));
             document.open();
             
             addMetaData(document);
             addTitlePage(document);
             addContent(document);
             addTestResults(document, testResults); // Add test results to the PDF
             
             document.close();
         } catch (DocumentException | FileNotFoundException e) {

         }
     }
 
     // Add metadata to the PDF
     private static void addMetaData(Document document) {
         document.addTitle("Test Results Report");
         document.addSubject("Using iText");
         document.addKeywords("Java, PDF, iText");
         document.addAuthor("Automated Judge System");
         document.addCreator("Automated Judge System");
     }
 
     // Add the title page to the PDF
     private static void addTitlePage(Document document) throws DocumentException {
         Paragraph preface = new Paragraph();
         addEmptyLine(preface, 1);
         preface.add(new Paragraph("Test Results Report", catFont));
 
         addEmptyLine(preface, 1);
         preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(),
                 smallBold));
         addEmptyLine(preface, 3);
         preface.add(new Paragraph("This document contains the results of the tests executed.", smallBold));
         
         document.add(preface);
         document.newPage();
     }
 
     // Add the main content of the PDF
     private static void addContent(Document document) throws DocumentException {
         Anchor anchor = new Anchor("Test Results Summary", catFont);
         anchor.setName("Test Results Summary");
 
         Chapter catPart = new Chapter(new Paragraph(anchor), 1);
         Paragraph subPara = new Paragraph("Summary of test results", subFont);
         Section subCatPart = catPart.addSection(subPara);
         subCatPart.add(new Paragraph("Detailed results are listed below."));
 
         document.add(catPart);
     }
 
     // Add test results in table format
     private static void addTestResults(Document document, Map<String, Boolean> testResults) throws DocumentException {
         Paragraph paragraph = new Paragraph();
         addEmptyLine(paragraph, 2);
         paragraph.add(new Paragraph("Test Results:", subFont));
         addEmptyLine(paragraph, 1);
 
         PdfPTable table = new PdfPTable(2); // Two columns for test name and result
 
         // Table header
         PdfPCell c1 = new PdfPCell(new Phrase("Test Name"));
         c1.setHorizontalAlignment(Element.ALIGN_CENTER);
         table.addCell(c1);
 
         c1 = new PdfPCell(new Phrase("Result"));
         c1.setHorizontalAlignment(Element.ALIGN_CENTER);
         table.addCell(c1);
         table.setHeaderRows(1);
 
         // Populate the table with test results
         for (Map.Entry<String, Boolean> entry : testResults.entrySet()) {
             table.addCell(entry.getKey());
             table.addCell(entry.getValue() ? "PASSED" : "FAILED");
         }
 
         document.add(paragraph);
         document.add(table);
     }
 
    //  // Create a simple list (can be customized further if needed)
    //  private static void createList(Section subCatPart) {
    //      List list = new List(true, false, 10);
    //      list.add(new ListItem("First point"));
    //      list.add(new ListItem("Second point"));
    //      list.add(new ListItem("Third point"));
    //      subCatPart.add(list);
    //  }
 
     // Add empty lines for spacing in the PDF
     private static void addEmptyLine(Paragraph paragraph, int number) {
         for (int i = 0; i < number; i++) {
             paragraph.add(new Paragraph(" "));
         }
     }
 } 
