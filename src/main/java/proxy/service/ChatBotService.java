package proxy.service;

/**
 * Interface representing the core service for interacting with a chatbot.
 * <p>
 * This interface provides methods for sending prompts, managing response
 * limits, and tracking chatbot usage statistics.
 * </p>
 *
 * @author jalenearmstrong
 * @see <a href="https://refactoring.guru/design-patterns/proxy">Proxy Design
 * Pattern</a>
 */
public interface ChatBotService {

    // -- ABSTRACT METHODS --
    /**
     * Generates a response from the chatbot based on the current state or
     * context.
     *
     * @return the chatbot's response as a {@code String}.
     */
    String generateResponse();

    /**
     * Retrieves the name of the chatbot.
     *
     * @return the name of the chatbot as a {@code String}.
     */
    String getChatBotName();

    /**
     * Gets the limit on the number of messages the chatbot can process in a
     * session.
     *
     * @return the maximum number of messages allowed.
     */
    int getMessageLimit();

    /**
     * Gets the total number of responses generated by the chatbot in the
     * current session.
     *
     * @return the number of responses generated.
     */
    int getNumResponsesGenerated();

    /**
     * Gets the total number of messages remaining before the chatbot reaches
     * its limit for the session.
     *
     * @return the number of messages remaining.
     */
    int getTotalNumMessagesRemaining();

    /**
     * Gets the total number of responses generated by the chatbot across all
     * sessions.
     *
     * @return the total number of responses generated.
     */
    int getTotalNumResponsesGenerated();

    /**
     * Checks if the chatbot has reached its message processing limit for the
     * session.
     *
     * @return {@code true} if the limit has been reached, {@code false}
     * otherwise.
     */
    boolean limitReached();

    /**
     * Sends a prompt to the chatbot and retrieves its response.
     *
     * @param requestMessage the message to prompt the chatbot with.
     * @return the chatbot's response as a {@code String}.
     */
    String prompt(String requestMessage);
}
